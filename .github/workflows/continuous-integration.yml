name: PR Continuous Integration - Mobile App

on:
  push:
    branches: [main]
  pull_request:
  workflow_dispatch:

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set Environment Variables
        uses: ./.github/actions/setvars
        with:
          varFilePath: ./.github/variables/myvars.env

      - uses: actions/setup-java@v1
        with:
          java-version: ${{ env.JAVA_VERSION }}

      - uses: subosito/flutter-action@v2
        with:
          cache: true
          flutter-version: ${{ env.FLUTTER_VERSION }}

      - name: Launch tests
        run: flutter test

  pre-build:
    if: ${{ github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch' }}
    runs-on: ubuntu-latest
    needs: test
    name: pre-build
    steps:
      - name: Get current timestamp
        id: getCurrentTimestamp
        run: echo "::set-output name=date::$(date +%s)"
    outputs:
      date: ${{ steps.getCurrentTimestamp.outputs.date }}

  build-android-staging:
    if: ${{ github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch' }}
    runs-on: ubuntu-latest
    needs: pre-build
    steps:
      - uses: actions/checkout@v3

      - name: Set Environment Variables
        uses: ./.github/actions/setvars
        with:
          varFilePath: ./.github/variables/myvars.env

      - uses: subosito/flutter-action@v2
        with:
          cache: true
          flutter-version: ${{ env.FLUTTER_VERSION }}

      - name: Check Firebase App Distribution CLI cache
        uses: actions/cache@v3
        id: firebase-tools-cache
        with:
          path: /usr/local/bin
          key: ${{ runner.os }}-firebase-tools

      - name: Install Firebase App Distribution CLI
        if: steps.firebase-tools-cache.outputs.cache-hit != 'true'
        run: |
          curl -sL https://firebase.tools | bash

      - name: Write Google configuration for Android
        shell: bash
        run: |
          echo "$STAGING_GOOGLE_SERVICE_B64" | base64 --decode > android/app/google-services.json
        env:
          STAGING_GOOGLE_SERVICE_B64: ${{ secrets.STAGING_GOOGLE_SERVICE_B64 }}

      - name: Write env
        shell: bash
        run: |
          echo "$STAGING_RUNTIME_ENV_B64" | base64 --decode > env/.env
        env:
          STAGING_RUNTIME_ENV_B64: ${{ secrets.STAGING_RUNTIME_ENV_B64 }}

      - name: Install Flutter dependencies
        shell: bash
        run: |
          flutter pub get

      - name: Build Android apk
        run: |
          flutter build apk \
          -t lib/main.dart \
          --flavor staging \
          --release \
          --build-number=${{ needs.pre-build.outputs.date }}

      - name: Deploy Android apk to Firebase App Distribution
        run: |
          firebase appdistribution:distribute build/app/outputs/flutter-apk/app-staging-release.apk \
            --token "$STAGING_FIREBASE_CI_TOKEN" \
            --app "$STAGING_ANDROID_APP_ID" \
            --groups agir-team
        env:
          STAGING_FIREBASE_CI_TOKEN: ${{ secrets.STAGING_FIREBASE_CI_TOKEN }}
          STAGING_ANDROID_APP_ID: ${{ secrets.STAGING_ANDROID_APP_ID }}
  build-ios-staging:
    if: ${{ github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch' }}
    runs-on: macos-12
    needs: pre-build
    steps:
      - uses: actions/checkout@v3

      - name: Set Environment Variables
        uses: ./.github/actions/setvars
        with:
          varFilePath: ./.github/variables/myvars.env

      - uses: subosito/flutter-action@v2
        with:
          cache: true
          flutter-version: ${{ env.FLUTTER_VERSION }}

      - uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Check Codemagic CLI cache
        uses: actions/cache@v3
        id: codemagic-cache
        with:
          path: /Users/runner/hostedtoolcache/Python/${{ env.PYTHON_VERSION }}/x64
          key: ${{ runner.os }}-codemagic

      - name: Install Codemagic CLI tools
        if: steps.codemagic-cache.outputs.cache-hit != 'true'
        shell: bash
        run: |
          pip3 install codemagic-cli-tools

      - name: Check Firebase App Distribution CLI cache
        uses: actions/cache@v3
        id: firebase-tools-cache
        with:
          path: /usr/local/bin
          key: ${{ runner.os }}-firebase-tools

      - name: Install Firebase App Distribution CLI
        if: steps.firebase-tools-cache.outputs.cache-hit != 'true'
        run: |
          curl -sL https://firebase.tools | bash

      - name: Write Google configuration for ios
        shell: bash
        run: |
          mkdir -p ios/firebase-config/staging
          mkdir -p ios/firebase-config/brsaStaging
          echo "$STAGING_GOOGLE_SERVICE_IOS_B64" | base64 --decode > ios/firebase-config/cejStaging/GoogleService-Info.plist
        env:
          STAGING_GOOGLE_SERVICE_IOS_B64: ${{ secrets.STAGING_GOOGLE_SERVICE_IOS_B64 }}

      - name: Write env
        shell: bash
        run: |
          echo "$STAGING_RUNTIME_ENV_B64" | base64 --decode > env/.env
        env:
          STAGING_RUNTIME_ENV_B64: ${{ secrets.STAGING_RUNTIME_ENV_B64 }}

      - name: Install Flutter dependencies
        shell: bash
        run: |
          flutter pub get

      - name: Check CocoaPods cache
        uses: actions/cache@v3
        id: cocoapods-cache
        with:
          path: ios/Pods
          key: ${{ runner.os }}-pods-${{ hashFiles('pubspec.lock') }}

      - name: Install CocoaPods dependencies
        if: steps.cocoapods-cache.outputs.cache-hit != 'true'
        shell: bash
        run: |
          find . -name "Podfile" -execdir pod install \;

      - name: Write p12 certificate
        shell: bash
        run: |
          echo "$P12_B64" | base64 --decode > ios/cert.p12
        env:
          P12_B64: ${{ secrets.P12_B64 }}

      - name: Install Apple Certificate
        uses: apple-actions/import-codesign-certs@v1
        with:
          p12-filepath: "ios/cert.p12"
          p12-password: ${{ secrets.P12_PASSWORD }}

      - name: Write Apple prod API Key
        shell: bash
        run: |
          mkdir ~/.private_keys
          echo "$APPLE_PROD_API_KEY_B64" | base64 --decode > ios/AuthKey_"$APPLE_PROD_API_KEY".p8
        env:
          APPLE_PROD_API_KEY: ${{ secrets.APPLE_PROD_API_KEY }}
          APPLE_PROD_API_KEY_B64: ${{ secrets.APPLE_PROD_API_KEY_B64 }}

      - name: Set up a temporary keychain for code signing
        shell: bash
        run: |
          keychain initialize

      - name: Fetch the code signing files from App Store Connect
        shell: bash
        run: |
          export APP_STORE_CONNECT_ISSUER_ID="$APPLE_PROD_API_ISSUER"
          export APP_STORE_CONNECT_KEY_IDENTIFIER="$APPLE_PROD_API_KEY"
          export APP_STORE_CONNECT_PRIVATE_KEY=`cat ios/AuthKey_"$APPLE_PROD_API_KEY".p8`
          app-store-connect fetch-signing-files fr.gouv.beta.agir.staging \
            --platform IOS \
            --type IOS_APP_ADHOC \
            --certificate-key=@env:APPLE_P12_PRIVATE_KEY \
            --create
        env:
          APPLE_PROD_API_ISSUER: ${{ secrets.APPLE_PROD_API_ISSUER }}
          APPLE_PROD_API_KEY: ${{ secrets.APPLE_PROD_API_KEY }}
          APPLE_P12_PRIVATE_KEY: ${{secrets.APPLE_P12_PRIVATE_KEY}}

      - name: CAdd fetched certificates to keychain
        shell: bash
        run: |
          keychain add-certificates

      - name: Update Xcode project settings with fetched code signing profiles and create staging_export_options.plist
        shell: bash
        run: |
          xcode-project use-profiles --export-options-plist ios/staging_export_options.plist

      - name: Build IPA with generated staging_export_options.plist
        shell: bash
        run: |
          flutter build ipa \
          -t lib/main.dart \
          --flavor staging \
          --release \
          --build-number=${{ needs.pre-build.outputs.date }} \
          --export-options-plist=ios/staging_export_options.plist \
          --no-pub \
          --verbose

      - name: Deploy IPA to Firebase App Distribution
        run: |
          firebase appdistribution:distribute $(find $(pwd) -name "Agir.ipa") \
            --token "$STAGING_FIREBASE_CI_TOKEN" \
            --app "$STAGING_IOS_APP_ID" \
            --groups agir-team
        env:
          STAGING_FIREBASE_CI_TOKEN: ${{ secrets.STAGING_FIREBASE_CI_TOKEN }}
          CEJ_STAGING_IOS_APP_ID: ${{ secrets.STAGING_IOS_APP_ID }}